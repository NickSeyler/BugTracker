@model BugTracker.Models.ViewModels.FullViewModel

@using BugTracker.Models.Enums
@using BugTracker.Services.Interfaces
@using Microsoft.AspNetCore.Identity

@inject UserManager<BTUser> UserManager
@inject IBTCompanyInfoService CompanyInfoService
@inject IBTProjectService ProjectService
@inject IBTTicketService TicketService

@{
	ViewData["Title"] = "Home";
	BTUser btUser = await UserManager.GetUserAsync(User);
}

<header class="page-header">
	<h2>Home</h2>
</header>

<!-- start: page -->
<div class="row">
	<div class="col-lg-6 mb-3">
		<section class="card">
			<div class="card-body">
				<div class="row">
					<div class="col-xl-6 text-center">
						<div class="card-body">
							<h5>Tickets by Status</h5>
							<!-- ChartJS: Pie/Doughnut -->
							<div class="col-md-12">
								<!--  Chart.js Canvas Tag -->
								<canvas id="donutChart1"></canvas>
							</div>
						</div>
					</div>
					<div class="col-xl-6 text-center">
						<div class="card-body">
							<h5>Tickets by Priority</h5>
							<!-- ChartJS: Pie/Doughnut -->
							<div class="col-md-12">
								<!--  Chart.js Canvas Tag -->
								<canvas id="donutChart2"></canvas>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>
	</div>
	<div class="col-lg-6">
		<div class="row mb-3">
			@{
				int incompleteCount = 0;
				int completeCount = 0;


				foreach (Project project in await ProjectService.GetAllProjectsByCompanyAsync(btUser.CompanyId))
				{
					var start = project.StartDate.DateTime;
					var end = project.EndDate.DateTime;
					var today = DateTime.Now;
					var percent = today >= end ? 100 : today < start ? 0 : Math.Round((today.Subtract(start)) / (end.Subtract(start)) * 100);

					if (percent == 100)
					{
						completeCount++;
					}
					else
					{
						incompleteCount++;
					}
				}
			}
			<div class="col-xl-6">
				<section class="card card-featured-left card-featured-tertiary mb-3">
					<div class="card-body">
						<div class="widget-summary">
							<div class="widget-summary-col widget-summary-col-icon">
								<div class="summary-icon bg-tertiary">
									<i class="fas fa-box"></i>
								</div>
							</div>
							<div class="widget-summary-col">
								<div class="summary">
									<h4 class="title">Projects in Progress</h4>
									<div class="info">
										<strong class="amount">@incompleteCount</strong>
									</div>
								</div>
								<div class="summary-footer">
									<a class="text-muted text-uppercase" asp-controller="Projects" asp-action="AllProjects">(view all)</a>
								</div>
							</div>
						</div>
					</div>
				</section>
			</div>
			<div class="col-xl-6">
				<section class="card card-featured-left card-featured-primary">
					<div class="card-body">
						<div class="widget-summary">
							<div class="widget-summary-col widget-summary-col-icon">
								<div class="summary-icon bg-primary">
									<i class="fas fa-box-open"></i>
								</div>
							</div>
							<div class="widget-summary-col">
								<div class="summary">
									<h4 class="title">Released Projects</h4>
									<div class="info">
										<strong class="amount">@completeCount</strong>
									</div>
								</div>
								<div class="summary-footer">
									<a class="text-muted text-uppercase" asp-controller="Projects" asp-action="AllProjects">(view all)</a>
								</div>
							</div>
						</div>
					</div>
				</section>
			</div>
		</div>
		<div class="row">
			<div class="col-xl-6">
				<section class="card card-featured-left card-featured-secondary mb-3">
					<div class="card-body">
						<div class="widget-summary">
							<div class="widget-summary-col widget-summary-col-icon">
								<div class="summary-icon bg-secondary">
									<i class="fas fa-wrench"></i>
								</div>
							</div>
							<div class="widget-summary-col">
								<div class="summary">
									<h4 class="title">Tickets in Progress</h4>
									<div class="info">
										<strong class="amount">
											@{
												int unarchivedTicketCount = 0;
												foreach(Ticket ticket in (await TicketService.GetAllTicketsByCompanyAsync(btUser.CompanyId)).Where(t => !t.Archived && !t.ArchivedByProject).ToList())
												{
													unarchivedTicketCount++;
												}
											}
											@unarchivedTicketCount
										</strong>
									</div>
								</div>
								<div class="summary-footer">
									<a class="text-muted text-uppercase" asp-controller="Tickets" asp-action="AllTickets">(view all)</a>
								</div>
							</div>
						</div>
					</div>
				</section>
			</div>
			<div class="col-xl-6">
				<section class="card card-featured-left card-featured-quaternary">
					<div class="card-body">
						<div class="widget-summary">
							<div class="widget-summary-col widget-summary-col-icon">
								<div class="summary-icon bg-quaternary">
									<i class="fas fa-toolbox"></i>
								</div>
							</div>
							<div class="widget-summary-col">
								<div class="summary">
									<h4 class="title">Total Tickets Resolved</h4>
									<div class="info">
										<strong class="amount">
											@{
												int completedTicketCount = 0;
												foreach(Ticket ticket in ((await TicketService.GetAllTicketsByCompanyAsync(btUser.CompanyId)).Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved))))
												{
													completedTicketCount++;
												}
											}
											@completedTicketCount
										</strong>
									</div>
								</div>
								<div class="summary-footer">
									<a class="text-muted text-uppercase "asp-controller="Tickets" asp-action="ArchivedTickets">(view all)</a>
								</div>
							</div>
						</div>
					</div>
				</section>
			</div>
		</div>
	</div>
</div>

<div class="row pt-4 mt-2">
	<div class="col-lg-6 col-xl-3">
		<section class="card mb-3">
			<header class="card-header">
				<h2 class="card-title">
					@{
						int memberCount = 0;
						foreach (BTUser member in await CompanyInfoService.GetAllMembersAsync(btUser.CompanyId))
						{
							memberCount++;
						}
					}
					<span class="badge badge-primary font-weight-normal va-middle p-2 me-e">@memberCount</span>
					<span class="va-middle">Members</span>
				</h2>
			</header>
			<div class="card-body">
				<div class="content">
					<ul class="simple-user-list">
					@foreach (BTUser member in await CompanyInfoService.GetAllMembersAsync(btUser.CompanyId))
                        {
                        <li>
                            @if (member.AvatarData != null)
                            {
                                <img class="" style="width:30px;height:30px;" src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarData))" alt="" />
                            }
                            else
                            {
                                <img class="" style="width:30px;height:30px;" src="https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png" alt="" />
                            }
                            <span class="">@member.FullName</span>
                            <span class="" style="font-size:x-small">[@((await UserManager.GetRolesAsync(member)).FirstOrDefault())]</span>
                        </li>
                        }
					</ul>
				</div>
			</div>
		</section>
	</div>
	<div class="col-lg-6 col-xl-9">
		<section class="card">
			<header class="card-header">
				<h2 class="card-title">Projects Stats</h2>
			</header>
			<div class="card-body">
				<table class="table table-responsive-md table-striped mb-0">
					<thead>
						<tr>
							<th>Project</th>
							<th>Priority</th>
							<th>Progress</th>
						</tr>
					</thead>
					<tbody>
						@foreach (Project project in await ProjectService.GetAllProjectsByCompanyAsync(btUser.CompanyId))
						{
						<tr>
							<td>@project.Name</td>
							<td>
							@if (project.ProjectPriorty?.Name == nameof(BTProjectPriority.Low))
							{
								<span class="badge badge-success">@project.ProjectPriorty?.Name</span>
							}
							else if (project.ProjectPriorty?.Name == nameof(BTProjectPriority.Medium))
							{
								<span class="badge badge-warning">@project.ProjectPriorty?.Name</span>
							}
							else if (project.ProjectPriorty?.Name == nameof(BTProjectPriority.High))
							{
								<span class="badge badge-danger">@project.ProjectPriorty?.Name</span>
							}
							else if (project.ProjectPriorty?.Name == nameof(BTProjectPriority.Urgent))
							{
								<span class="badge badge-dark">@project.ProjectPriorty?.Name</span>
							}
							</td>
							<td>
							@{
                                var start = project.StartDate.DateTime;
                                var end = project.EndDate.DateTime;
                                var today = DateTime.Now;
                                var percent = today >= end ? 100 : today < start ? 0 : Math.Round((today.Subtract(start)) / (end.Subtract(start)) * 100);
                            }
							<div class="progress progress-sm progress-half-rounded m-0 mt-1 light">
								<div class="progress-bar progress-bar-primary" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: @percent%;">
									@percent%
								</div>
							</div>
							</td>
						</tr>
						}
					</tbody>
				</table>
			</div>
		</section>
	</div>
</div>
<!-- end: page -->

@section scripts{
<!-- *** Begin Chart JS Pie/Donut *** -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
<script>
	var donutChartCanvas1 = $('#donutChart1').get(0).getContext('2d');
	var donutData1 = {
		labels: [
			'@nameof(BTTicketStatus.Development)',
			'@nameof(BTTicketStatus.New)',
			'@nameof(BTTicketStatus.Resolved)',
			'@nameof(BTTicketStatus.Testing)'
		],
		datasets: [
			{
				data: [
					@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count()
				],
				backgroundColor: [
					'rgba(255, 99, 132, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(255, 206, 86, 0.2)',
					'rgba(75, 192, 192, 0.2)'
				],
				borderColor: [
					'rgba(255, 99, 132, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(255, 206, 86, 1)',
					'rgba(75, 192, 192, 1)'
				]
			}
		]
	};

	var donutOptions1 = {
		maintainAspectRatio: false,
		responsive: true,
	};
	//Create pie or douhnut chart
	// You can switch between pie and douhnut using the method below.
	new Chart(donutChartCanvas1, {
		type: 'doughnut',
		data: donutData1,
		options: donutOptions1
	});
</script>
<!-- *** End Chart JS Donut *** -->

<script>
	var donutChartCanvas2 = $('#donutChart2').get(0).getContext('2d');
	var donutData2 = {
		labels: [
			'@nameof(BTTicketPriority.Low)',
			'@nameof(BTTicketPriority.Medium)',
			'@nameof(BTTicketPriority.High)',
			'@nameof(BTTicketPriority.Urgent)'
		],
		datasets: [
			{
				data: [
					@Model.Tickets.Where(t=> t.TicketPriority.Name == nameof(BTTicketPriority.Low)).Count(),
					@Model.Tickets.Where(t=> t.TicketPriority.Name == nameof(BTTicketPriority.Medium)).Count(),
					@Model.Tickets.Where(t=> t.TicketPriority.Name == nameof(BTTicketPriority.High)).Count(),
					@Model.Tickets.Where(t=> t.TicketPriority.Name == nameof(BTTicketPriority.Urgent)).Count()
				],
				backgroundColor: [
					'rgba(75, 192, 192, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(255, 206, 86, 0.2)',
					'rgba(255, 99, 132, 0.2)'
				],
				borderColor: [
					'rgba(75, 192, 192, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(255, 206, 86, 1)',
					'rgba(255, 99, 132, 1)'
				]
			}
		]
	};

	var donutOptions2 = {
		maintainAspectRatio: false,
		responsive: true,
	};
	//Create pie or douhnut chart
	// You can switch between pie and douhnut using the method below.
	new Chart(donutChartCanvas2, {
		type: 'doughnut',
		data: donutData2,
		options: donutOptions2
	});
</script>
}